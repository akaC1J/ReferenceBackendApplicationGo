// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package test

//go:generate minimock -i route256/loms/internal/service/stockService.Repository -o repository_mock_test.go -n RepositoryMock -p test

import (
	"context"
	"route256/loms/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements mm_stockservice.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetStock          func(ctx context.Context, sku model.SKUType) (s1 model.Stock, err error)
	funcGetStockOrigin    string
	inspectFuncGetStock   func(ctx context.Context, sku model.SKUType)
	afterGetStockCounter  uint64
	beforeGetStockCounter uint64
	GetStockMock          mRepositoryMockGetStock

	funcUpdateStock          func(ctx context.Context, items []model.Stock) (err error)
	funcUpdateStockOrigin    string
	inspectFuncUpdateStock   func(ctx context.Context, items []model.Stock)
	afterUpdateStockCounter  uint64
	beforeUpdateStockCounter uint64
	UpdateStockMock          mRepositoryMockUpdateStock
}

// NewRepositoryMock returns a mock for mm_stockservice.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStockMock = mRepositoryMockGetStock{mock: m}
	m.GetStockMock.callArgs = []*RepositoryMockGetStockParams{}

	m.UpdateStockMock = mRepositoryMockUpdateStock{mock: m}
	m.UpdateStockMock.callArgs = []*RepositoryMockUpdateStockParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockGetStock struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetStockExpectation
	expectations       []*RepositoryMockGetStockExpectation

	callArgs []*RepositoryMockGetStockParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockGetStockExpectation specifies expectation struct of the Repository.GetStock
type RepositoryMockGetStockExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockGetStockParams
	paramPtrs          *RepositoryMockGetStockParamPtrs
	expectationOrigins RepositoryMockGetStockExpectationOrigins
	results            *RepositoryMockGetStockResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockGetStockParams contains parameters of the Repository.GetStock
type RepositoryMockGetStockParams struct {
	ctx context.Context
	sku model.SKUType
}

// RepositoryMockGetStockParamPtrs contains pointers to parameters of the Repository.GetStock
type RepositoryMockGetStockParamPtrs struct {
	ctx *context.Context
	sku *model.SKUType
}

// RepositoryMockGetStockResults contains results of the Repository.GetStock
type RepositoryMockGetStockResults struct {
	s1  model.Stock
	err error
}

// RepositoryMockGetStockOrigins contains origins of expectations of the Repository.GetStock
type RepositoryMockGetStockExpectationOrigins struct {
	origin    string
	originCtx string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStock *mRepositoryMockGetStock) Optional() *mRepositoryMockGetStock {
	mmGetStock.optional = true
	return mmGetStock
}

// Expect sets up expected params for Repository.GetStock
func (mmGetStock *mRepositoryMockGetStock) Expect(ctx context.Context, sku model.SKUType) *mRepositoryMockGetStock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &RepositoryMockGetStockExpectation{}
	}

	if mmGetStock.defaultExpectation.paramPtrs != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by ExpectParams functions")
	}

	mmGetStock.defaultExpectation.params = &RepositoryMockGetStockParams{ctx, sku}
	mmGetStock.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetStock.expectations {
		if minimock.Equal(e.params, mmGetStock.defaultExpectation.params) {
			mmGetStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStock.defaultExpectation.params)
		}
	}

	return mmGetStock
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetStock
func (mmGetStock *mRepositoryMockGetStock) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetStock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &RepositoryMockGetStockExpectation{}
	}

	if mmGetStock.defaultExpectation.params != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Expect")
	}

	if mmGetStock.defaultExpectation.paramPtrs == nil {
		mmGetStock.defaultExpectation.paramPtrs = &RepositoryMockGetStockParamPtrs{}
	}
	mmGetStock.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetStock.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetStock
}

// ExpectSkuParam2 sets up expected param sku for Repository.GetStock
func (mmGetStock *mRepositoryMockGetStock) ExpectSkuParam2(sku model.SKUType) *mRepositoryMockGetStock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &RepositoryMockGetStockExpectation{}
	}

	if mmGetStock.defaultExpectation.params != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Expect")
	}

	if mmGetStock.defaultExpectation.paramPtrs == nil {
		mmGetStock.defaultExpectation.paramPtrs = &RepositoryMockGetStockParamPtrs{}
	}
	mmGetStock.defaultExpectation.paramPtrs.sku = &sku
	mmGetStock.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmGetStock
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetStock
func (mmGetStock *mRepositoryMockGetStock) Inspect(f func(ctx context.Context, sku model.SKUType)) *mRepositoryMockGetStock {
	if mmGetStock.mock.inspectFuncGetStock != nil {
		mmGetStock.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetStock")
	}

	mmGetStock.mock.inspectFuncGetStock = f

	return mmGetStock
}

// Return sets up results that will be returned by Repository.GetStock
func (mmGetStock *mRepositoryMockGetStock) Return(s1 model.Stock, err error) *RepositoryMock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &RepositoryMockGetStockExpectation{mock: mmGetStock.mock}
	}
	mmGetStock.defaultExpectation.results = &RepositoryMockGetStockResults{s1, err}
	mmGetStock.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetStock.mock
}

// Set uses given function f to mock the Repository.GetStock method
func (mmGetStock *mRepositoryMockGetStock) Set(f func(ctx context.Context, sku model.SKUType) (s1 model.Stock, err error)) *RepositoryMock {
	if mmGetStock.defaultExpectation != nil {
		mmGetStock.mock.t.Fatalf("Default expectation is already set for the Repository.GetStock method")
	}

	if len(mmGetStock.expectations) > 0 {
		mmGetStock.mock.t.Fatalf("Some expectations are already set for the Repository.GetStock method")
	}

	mmGetStock.mock.funcGetStock = f
	mmGetStock.mock.funcGetStockOrigin = minimock.CallerInfo(1)
	return mmGetStock.mock
}

// When sets expectation for the Repository.GetStock which will trigger the result defined by the following
// Then helper
func (mmGetStock *mRepositoryMockGetStock) When(ctx context.Context, sku model.SKUType) *RepositoryMockGetStockExpectation {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("RepositoryMock.GetStock mock is already set by Set")
	}

	expectation := &RepositoryMockGetStockExpectation{
		mock:               mmGetStock.mock,
		params:             &RepositoryMockGetStockParams{ctx, sku},
		expectationOrigins: RepositoryMockGetStockExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetStock.expectations = append(mmGetStock.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetStock return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetStockExpectation) Then(s1 model.Stock, err error) *RepositoryMock {
	e.results = &RepositoryMockGetStockResults{s1, err}
	return e.mock
}

// Times sets number of times Repository.GetStock should be invoked
func (mmGetStock *mRepositoryMockGetStock) Times(n uint64) *mRepositoryMockGetStock {
	if n == 0 {
		mmGetStock.mock.t.Fatalf("Times of RepositoryMock.GetStock mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStock.expectedInvocations, n)
	mmGetStock.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetStock
}

func (mmGetStock *mRepositoryMockGetStock) invocationsDone() bool {
	if len(mmGetStock.expectations) == 0 && mmGetStock.defaultExpectation == nil && mmGetStock.mock.funcGetStock == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStock.mock.afterGetStockCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStock.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStock implements mm_stockservice.Repository
func (mmGetStock *RepositoryMock) GetStock(ctx context.Context, sku model.SKUType) (s1 model.Stock, err error) {
	mm_atomic.AddUint64(&mmGetStock.beforeGetStockCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStock.afterGetStockCounter, 1)

	mmGetStock.t.Helper()

	if mmGetStock.inspectFuncGetStock != nil {
		mmGetStock.inspectFuncGetStock(ctx, sku)
	}

	mm_params := RepositoryMockGetStockParams{ctx, sku}

	// Record call args
	mmGetStock.GetStockMock.mutex.Lock()
	mmGetStock.GetStockMock.callArgs = append(mmGetStock.GetStockMock.callArgs, &mm_params)
	mmGetStock.GetStockMock.mutex.Unlock()

	for _, e := range mmGetStock.GetStockMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetStock.GetStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStock.GetStockMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStock.GetStockMock.defaultExpectation.params
		mm_want_ptrs := mmGetStock.GetStockMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetStockParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStock.t.Errorf("RepositoryMock.GetStock got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStock.GetStockMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetStock.t.Errorf("RepositoryMock.GetStock got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStock.GetStockMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStock.t.Errorf("RepositoryMock.GetStock got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetStock.GetStockMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStock.GetStockMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStock.t.Fatal("No results are set for the RepositoryMock.GetStock")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetStock.funcGetStock != nil {
		return mmGetStock.funcGetStock(ctx, sku)
	}
	mmGetStock.t.Fatalf("Unexpected call to RepositoryMock.GetStock. %v %v", ctx, sku)
	return
}

// GetStockAfterCounter returns a count of finished RepositoryMock.GetStock invocations
func (mmGetStock *RepositoryMock) GetStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStock.afterGetStockCounter)
}

// GetStockBeforeCounter returns a count of RepositoryMock.GetStock invocations
func (mmGetStock *RepositoryMock) GetStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStock.beforeGetStockCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStock *mRepositoryMockGetStock) Calls() []*RepositoryMockGetStockParams {
	mmGetStock.mutex.RLock()

	argCopy := make([]*RepositoryMockGetStockParams, len(mmGetStock.callArgs))
	copy(argCopy, mmGetStock.callArgs)

	mmGetStock.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockDone returns true if the count of the GetStock invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetStockDone() bool {
	if m.GetStockMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockMock.invocationsDone()
}

// MinimockGetStockInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetStockInspect() {
	for _, e := range m.GetStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetStock at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetStockCounter := mm_atomic.LoadUint64(&m.afterGetStockCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockMock.defaultExpectation != nil && afterGetStockCounter < 1 {
		if m.GetStockMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.GetStock at\n%s", m.GetStockMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetStock at\n%s with params: %#v", m.GetStockMock.defaultExpectation.expectationOrigins.origin, *m.GetStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStock != nil && afterGetStockCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.GetStock at\n%s", m.funcGetStockOrigin)
	}

	if !m.GetStockMock.invocationsDone() && afterGetStockCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetStock at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockMock.expectedInvocations), m.GetStockMock.expectedInvocationsOrigin, afterGetStockCounter)
	}
}

type mRepositoryMockUpdateStock struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockUpdateStockExpectation
	expectations       []*RepositoryMockUpdateStockExpectation

	callArgs []*RepositoryMockUpdateStockParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockUpdateStockExpectation specifies expectation struct of the Repository.UpdateStock
type RepositoryMockUpdateStockExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockUpdateStockParams
	paramPtrs          *RepositoryMockUpdateStockParamPtrs
	expectationOrigins RepositoryMockUpdateStockExpectationOrigins
	results            *RepositoryMockUpdateStockResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockUpdateStockParams contains parameters of the Repository.UpdateStock
type RepositoryMockUpdateStockParams struct {
	ctx   context.Context
	items []model.Stock
}

// RepositoryMockUpdateStockParamPtrs contains pointers to parameters of the Repository.UpdateStock
type RepositoryMockUpdateStockParamPtrs struct {
	ctx   *context.Context
	items *[]model.Stock
}

// RepositoryMockUpdateStockResults contains results of the Repository.UpdateStock
type RepositoryMockUpdateStockResults struct {
	err error
}

// RepositoryMockUpdateStockOrigins contains origins of expectations of the Repository.UpdateStock
type RepositoryMockUpdateStockExpectationOrigins struct {
	origin      string
	originCtx   string
	originItems string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateStock *mRepositoryMockUpdateStock) Optional() *mRepositoryMockUpdateStock {
	mmUpdateStock.optional = true
	return mmUpdateStock
}

// Expect sets up expected params for Repository.UpdateStock
func (mmUpdateStock *mRepositoryMockUpdateStock) Expect(ctx context.Context, items []model.Stock) *mRepositoryMockUpdateStock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &RepositoryMockUpdateStockExpectation{}
	}

	if mmUpdateStock.defaultExpectation.paramPtrs != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by ExpectParams functions")
	}

	mmUpdateStock.defaultExpectation.params = &RepositoryMockUpdateStockParams{ctx, items}
	mmUpdateStock.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateStock.expectations {
		if minimock.Equal(e.params, mmUpdateStock.defaultExpectation.params) {
			mmUpdateStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateStock.defaultExpectation.params)
		}
	}

	return mmUpdateStock
}

// ExpectCtxParam1 sets up expected param ctx for Repository.UpdateStock
func (mmUpdateStock *mRepositoryMockUpdateStock) ExpectCtxParam1(ctx context.Context) *mRepositoryMockUpdateStock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &RepositoryMockUpdateStockExpectation{}
	}

	if mmUpdateStock.defaultExpectation.params != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Expect")
	}

	if mmUpdateStock.defaultExpectation.paramPtrs == nil {
		mmUpdateStock.defaultExpectation.paramPtrs = &RepositoryMockUpdateStockParamPtrs{}
	}
	mmUpdateStock.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateStock.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateStock
}

// ExpectItemsParam2 sets up expected param items for Repository.UpdateStock
func (mmUpdateStock *mRepositoryMockUpdateStock) ExpectItemsParam2(items []model.Stock) *mRepositoryMockUpdateStock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &RepositoryMockUpdateStockExpectation{}
	}

	if mmUpdateStock.defaultExpectation.params != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Expect")
	}

	if mmUpdateStock.defaultExpectation.paramPtrs == nil {
		mmUpdateStock.defaultExpectation.paramPtrs = &RepositoryMockUpdateStockParamPtrs{}
	}
	mmUpdateStock.defaultExpectation.paramPtrs.items = &items
	mmUpdateStock.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmUpdateStock
}

// Inspect accepts an inspector function that has same arguments as the Repository.UpdateStock
func (mmUpdateStock *mRepositoryMockUpdateStock) Inspect(f func(ctx context.Context, items []model.Stock)) *mRepositoryMockUpdateStock {
	if mmUpdateStock.mock.inspectFuncUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("Inspect function is already set for RepositoryMock.UpdateStock")
	}

	mmUpdateStock.mock.inspectFuncUpdateStock = f

	return mmUpdateStock
}

// Return sets up results that will be returned by Repository.UpdateStock
func (mmUpdateStock *mRepositoryMockUpdateStock) Return(err error) *RepositoryMock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &RepositoryMockUpdateStockExpectation{mock: mmUpdateStock.mock}
	}
	mmUpdateStock.defaultExpectation.results = &RepositoryMockUpdateStockResults{err}
	mmUpdateStock.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateStock.mock
}

// Set uses given function f to mock the Repository.UpdateStock method
func (mmUpdateStock *mRepositoryMockUpdateStock) Set(f func(ctx context.Context, items []model.Stock) (err error)) *RepositoryMock {
	if mmUpdateStock.defaultExpectation != nil {
		mmUpdateStock.mock.t.Fatalf("Default expectation is already set for the Repository.UpdateStock method")
	}

	if len(mmUpdateStock.expectations) > 0 {
		mmUpdateStock.mock.t.Fatalf("Some expectations are already set for the Repository.UpdateStock method")
	}

	mmUpdateStock.mock.funcUpdateStock = f
	mmUpdateStock.mock.funcUpdateStockOrigin = minimock.CallerInfo(1)
	return mmUpdateStock.mock
}

// When sets expectation for the Repository.UpdateStock which will trigger the result defined by the following
// Then helper
func (mmUpdateStock *mRepositoryMockUpdateStock) When(ctx context.Context, items []model.Stock) *RepositoryMockUpdateStockExpectation {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("RepositoryMock.UpdateStock mock is already set by Set")
	}

	expectation := &RepositoryMockUpdateStockExpectation{
		mock:               mmUpdateStock.mock,
		params:             &RepositoryMockUpdateStockParams{ctx, items},
		expectationOrigins: RepositoryMockUpdateStockExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateStock.expectations = append(mmUpdateStock.expectations, expectation)
	return expectation
}

// Then sets up Repository.UpdateStock return parameters for the expectation previously defined by the When method
func (e *RepositoryMockUpdateStockExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockUpdateStockResults{err}
	return e.mock
}

// Times sets number of times Repository.UpdateStock should be invoked
func (mmUpdateStock *mRepositoryMockUpdateStock) Times(n uint64) *mRepositoryMockUpdateStock {
	if n == 0 {
		mmUpdateStock.mock.t.Fatalf("Times of RepositoryMock.UpdateStock mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateStock.expectedInvocations, n)
	mmUpdateStock.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateStock
}

func (mmUpdateStock *mRepositoryMockUpdateStock) invocationsDone() bool {
	if len(mmUpdateStock.expectations) == 0 && mmUpdateStock.defaultExpectation == nil && mmUpdateStock.mock.funcUpdateStock == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateStock.mock.afterUpdateStockCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateStock.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateStock implements mm_stockservice.Repository
func (mmUpdateStock *RepositoryMock) UpdateStock(ctx context.Context, items []model.Stock) (err error) {
	mm_atomic.AddUint64(&mmUpdateStock.beforeUpdateStockCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateStock.afterUpdateStockCounter, 1)

	mmUpdateStock.t.Helper()

	if mmUpdateStock.inspectFuncUpdateStock != nil {
		mmUpdateStock.inspectFuncUpdateStock(ctx, items)
	}

	mm_params := RepositoryMockUpdateStockParams{ctx, items}

	// Record call args
	mmUpdateStock.UpdateStockMock.mutex.Lock()
	mmUpdateStock.UpdateStockMock.callArgs = append(mmUpdateStock.UpdateStockMock.callArgs, &mm_params)
	mmUpdateStock.UpdateStockMock.mutex.Unlock()

	for _, e := range mmUpdateStock.UpdateStockMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateStock.UpdateStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateStock.UpdateStockMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateStock.UpdateStockMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateStock.UpdateStockMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockUpdateStockParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateStock.t.Errorf("RepositoryMock.UpdateStock got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateStock.UpdateStockMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmUpdateStock.t.Errorf("RepositoryMock.UpdateStock got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateStock.UpdateStockMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateStock.t.Errorf("RepositoryMock.UpdateStock got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateStock.UpdateStockMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateStock.UpdateStockMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateStock.t.Fatal("No results are set for the RepositoryMock.UpdateStock")
		}
		return (*mm_results).err
	}
	if mmUpdateStock.funcUpdateStock != nil {
		return mmUpdateStock.funcUpdateStock(ctx, items)
	}
	mmUpdateStock.t.Fatalf("Unexpected call to RepositoryMock.UpdateStock. %v %v", ctx, items)
	return
}

// UpdateStockAfterCounter returns a count of finished RepositoryMock.UpdateStock invocations
func (mmUpdateStock *RepositoryMock) UpdateStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStock.afterUpdateStockCounter)
}

// UpdateStockBeforeCounter returns a count of RepositoryMock.UpdateStock invocations
func (mmUpdateStock *RepositoryMock) UpdateStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStock.beforeUpdateStockCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.UpdateStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateStock *mRepositoryMockUpdateStock) Calls() []*RepositoryMockUpdateStockParams {
	mmUpdateStock.mutex.RLock()

	argCopy := make([]*RepositoryMockUpdateStockParams, len(mmUpdateStock.callArgs))
	copy(argCopy, mmUpdateStock.callArgs)

	mmUpdateStock.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateStockDone returns true if the count of the UpdateStock invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockUpdateStockDone() bool {
	if m.UpdateStockMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateStockMock.invocationsDone()
}

// MinimockUpdateStockInspect logs each unmet expectation
func (m *RepositoryMock) MinimockUpdateStockInspect() {
	for _, e := range m.UpdateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.UpdateStock at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateStockCounter := mm_atomic.LoadUint64(&m.afterUpdateStockCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStockMock.defaultExpectation != nil && afterUpdateStockCounter < 1 {
		if m.UpdateStockMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.UpdateStock at\n%s", m.UpdateStockMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.UpdateStock at\n%s with params: %#v", m.UpdateStockMock.defaultExpectation.expectationOrigins.origin, *m.UpdateStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStock != nil && afterUpdateStockCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.UpdateStock at\n%s", m.funcUpdateStockOrigin)
	}

	if !m.UpdateStockMock.invocationsDone() && afterUpdateStockCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.UpdateStock at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateStockMock.expectedInvocations), m.UpdateStockMock.expectedInvocationsOrigin, afterUpdateStockCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetStockInspect()

			m.MinimockUpdateStockInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStockDone() &&
		m.MinimockUpdateStockDone()
}
