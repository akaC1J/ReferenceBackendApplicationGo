// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package outboxrepository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPendingOutboxEvents = `-- name: GetPendingOutboxEvents :many
SELECT id, order_id, payload, created_at
FROM outbox
WHERE processed = FALSE
ORDER BY created_at
LIMIT $1
`

type GetPendingOutboxEventsRow struct {
	ID        int32
	OrderID   int64
	Payload   string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetPendingOutboxEvents(ctx context.Context, limit int32) ([]*GetPendingOutboxEventsRow, error) {
	rows, err := q.db.Query(ctx, getPendingOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPendingOutboxEventsRow
	for rows.Next() {
		var i GetPendingOutboxEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Payload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markOutboxEventProcessed = `-- name: MarkOutboxEventProcessed :exec
UPDATE outbox
SET processed = TRUE
WHERE id = $1
`

func (q *Queries) MarkOutboxEventProcessed(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markOutboxEventProcessed, id)
	return err
}

const saveOutboxEvent = `-- name: SaveOutboxEvent :exec
INSERT INTO outbox (order_id, payload)
VALUES ($1, $2)
`

type SaveOutboxEventParams struct {
	OrderID int64
	Payload string
}

func (q *Queries) SaveOutboxEvent(ctx context.Context, arg *SaveOutboxEventParams) error {
	_, err := q.db.Exec(ctx, saveOutboxEvent, arg.OrderID, arg.Payload)
	return err
}
