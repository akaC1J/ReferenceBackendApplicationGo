// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package cartservice

//go:generate minimock -i route256/cart/internal/pkg/service/cartservice.LomsService -o loms_service_mock_test.go -n LomsServiceMock -p cartservice

import (
	"context"
	"route256/cart/internal/pkg/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LomsServiceMock implements LomsService
type LomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem) (i1 int64, err error)
	funcCreateOrderOrigin    string
	inspectFuncCreateOrder   func(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsServiceMockCreateOrder

	funcGetStockInfo          func(ctx context.Context, sku model.SKU) (availableCountStock uint64, err error)
	funcGetStockInfoOrigin    string
	inspectFuncGetStockInfo   func(ctx context.Context, sku model.SKU)
	afterGetStockInfoCounter  uint64
	beforeGetStockInfoCounter uint64
	GetStockInfoMock          mLomsServiceMockGetStockInfo
}

// NewLomsServiceMock returns a mock for LomsService
func NewLomsServiceMock(t minimock.Tester) *LomsServiceMock {
	m := &LomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLomsServiceMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsServiceMockCreateOrderParams{}

	m.GetStockInfoMock = mLomsServiceMockGetStockInfo{mock: m}
	m.GetStockInfoMock.callArgs = []*LomsServiceMockGetStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceMockCreateOrder struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockCreateOrderExpectation
	expectations       []*LomsServiceMockCreateOrderExpectation

	callArgs []*LomsServiceMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceMockCreateOrderExpectation specifies expectation struct of the LomsService.CreateOrder
type LomsServiceMockCreateOrderExpectation struct {
	mock               *LomsServiceMock
	params             *LomsServiceMockCreateOrderParams
	paramPtrs          *LomsServiceMockCreateOrderParamPtrs
	expectationOrigins LomsServiceMockCreateOrderExpectationOrigins
	results            *LomsServiceMockCreateOrderResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceMockCreateOrderParams contains parameters of the LomsService.CreateOrder
type LomsServiceMockCreateOrderParams struct {
	ctx    context.Context
	userId model.UserId
	cart   map[model.SKU]model.CartItem
}

// LomsServiceMockCreateOrderParamPtrs contains pointers to parameters of the LomsService.CreateOrder
type LomsServiceMockCreateOrderParamPtrs struct {
	ctx    *context.Context
	userId *model.UserId
	cart   *map[model.SKU]model.CartItem
}

// LomsServiceMockCreateOrderResults contains results of the LomsService.CreateOrder
type LomsServiceMockCreateOrderResults struct {
	i1  int64
	err error
}

// LomsServiceMockCreateOrderOrigins contains origins of expectations of the LomsService.CreateOrder
type LomsServiceMockCreateOrderExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserId string
	originCart   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLomsServiceMockCreateOrder) Optional() *mLomsServiceMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Expect(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LomsServiceMockCreateOrderParams{ctx, userId, cart}
	mmCreateOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateOrder.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectUserIdParam2 sets up expected param userId for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectUserIdParam2(userId model.UserId) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.userId = &userId
	mmCreateOrder.defaultExpectation.expectationOrigins.originUserId = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectCartParam3 sets up expected param cart for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectCartParam3(cart map[model.SKU]model.CartItem) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.cart = &cart
	mmCreateOrder.defaultExpectation.expectationOrigins.originCart = minimock.CallerInfo(1)

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Inspect(f func(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem)) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Return(i1 int64, err error) *LomsServiceMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsServiceMockCreateOrderResults{i1, err}
	mmCreateOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LomsService.CreateOrder method
func (mmCreateOrder *mLomsServiceMockCreateOrder) Set(f func(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem) (i1 int64, err error)) *LomsServiceMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LomsService.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LomsService.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	mmCreateOrder.mock.funcCreateOrderOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// When sets expectation for the LomsService.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsServiceMockCreateOrder) When(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem) *LomsServiceMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsServiceMockCreateOrderExpectation{
		mock:               mmCreateOrder.mock,
		params:             &LomsServiceMockCreateOrderParams{ctx, userId, cart},
		expectationOrigins: LomsServiceMockCreateOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsService.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockCreateOrderExpectation) Then(i1 int64, err error) *LomsServiceMock {
	e.results = &LomsServiceMockCreateOrderResults{i1, err}
	return e.mock
}

// Times sets number of times LomsService.CreateOrder should be invoked
func (mmCreateOrder *mLomsServiceMockCreateOrder) Times(n uint64) *mLomsServiceMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LomsServiceMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	mmCreateOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateOrder
}

func (mmCreateOrder *mLomsServiceMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements LomsService
func (mmCreateOrder *LomsServiceMock) CreateOrder(ctx context.Context, userId model.UserId, cart map[model.SKU]model.CartItem) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	mmCreateOrder.t.Helper()

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userId, cart)
	}

	mm_params := LomsServiceMockCreateOrderParams{ctx, userId, cart}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockCreateOrderParams{ctx, userId, cart}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userId != nil && !minimock.Equal(*mm_want_ptrs.userId, mm_got.userId) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter userId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originUserId, *mm_want_ptrs.userId, mm_got.userId, minimock.Diff(*mm_want_ptrs.userId, mm_got.userId))
			}

			if mm_want_ptrs.cart != nil && !minimock.Equal(*mm_want_ptrs.cart, mm_got.cart) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter cart, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originCart, *mm_want_ptrs.cart, mm_got.cart, minimock.Diff(*mm_want_ptrs.cart, mm_got.cart))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsServiceMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userId, cart)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsServiceMock.CreateOrder. %v %v %v", ctx, userId, cart)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsServiceMockCreateOrder) Calls() []*LomsServiceMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsServiceMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s", m.CreateOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s with params: %#v", m.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s", m.funcCreateOrderOrigin)
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.CreateOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), m.CreateOrderMock.expectedInvocationsOrigin, afterCreateOrderCounter)
	}
}

type mLomsServiceMockGetStockInfo struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockGetStockInfoExpectation
	expectations       []*LomsServiceMockGetStockInfoExpectation

	callArgs []*LomsServiceMockGetStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceMockGetStockInfoExpectation specifies expectation struct of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoExpectation struct {
	mock               *LomsServiceMock
	params             *LomsServiceMockGetStockInfoParams
	paramPtrs          *LomsServiceMockGetStockInfoParamPtrs
	expectationOrigins LomsServiceMockGetStockInfoExpectationOrigins
	results            *LomsServiceMockGetStockInfoResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceMockGetStockInfoParams contains parameters of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoParams struct {
	ctx context.Context
	sku model.SKU
}

// LomsServiceMockGetStockInfoParamPtrs contains pointers to parameters of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoParamPtrs struct {
	ctx *context.Context
	sku *model.SKU
}

// LomsServiceMockGetStockInfoResults contains results of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoResults struct {
	availableCountStock uint64
	err                 error
}

// LomsServiceMockGetStockInfoOrigins contains origins of expectations of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoExpectationOrigins struct {
	origin    string
	originCtx string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Optional() *mLomsServiceMockGetStockInfo {
	mmGetStockInfo.optional = true
	return mmGetStockInfo
}

// Expect sets up expected params for LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Expect(ctx context.Context, sku model.SKU) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by ExpectParams functions")
	}

	mmGetStockInfo.defaultExpectation.params = &LomsServiceMockGetStockInfoParams{ctx, sku}
	mmGetStockInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetStockInfo.expectations {
		if minimock.Equal(e.params, mmGetStockInfo.defaultExpectation.params) {
			mmGetStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockInfo.defaultExpectation.params)
		}
	}

	return mmGetStockInfo
}

// ExpectCtxParam1 sets up expected param ctx for LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) ExpectCtxParam1(ctx context.Context) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LomsServiceMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetStockInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetStockInfo
}

// ExpectSkuParam2 sets up expected param sku for LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) ExpectSkuParam2(sku model.SKU) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LomsServiceMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.sku = &sku
	mmGetStockInfo.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmGetStockInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Inspect(f func(ctx context.Context, sku model.SKU)) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.GetStockInfo")
	}

	mmGetStockInfo.mock.inspectFuncGetStockInfo = f

	return mmGetStockInfo
}

// Return sets up results that will be returned by LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Return(availableCountStock uint64, err error) *LomsServiceMock {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{mock: mmGetStockInfo.mock}
	}
	mmGetStockInfo.defaultExpectation.results = &LomsServiceMockGetStockInfoResults{availableCountStock, err}
	mmGetStockInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo.mock
}

// Set uses given function f to mock the LomsService.GetStockInfo method
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Set(f func(ctx context.Context, sku model.SKU) (availableCountStock uint64, err error)) *LomsServiceMock {
	if mmGetStockInfo.defaultExpectation != nil {
		mmGetStockInfo.mock.t.Fatalf("Default expectation is already set for the LomsService.GetStockInfo method")
	}

	if len(mmGetStockInfo.expectations) > 0 {
		mmGetStockInfo.mock.t.Fatalf("Some expectations are already set for the LomsService.GetStockInfo method")
	}

	mmGetStockInfo.mock.funcGetStockInfo = f
	mmGetStockInfo.mock.funcGetStockInfoOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo.mock
}

// When sets expectation for the LomsService.GetStockInfo which will trigger the result defined by the following
// Then helper
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) When(ctx context.Context, sku model.SKU) *LomsServiceMockGetStockInfoExpectation {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	expectation := &LomsServiceMockGetStockInfoExpectation{
		mock:               mmGetStockInfo.mock,
		params:             &LomsServiceMockGetStockInfoParams{ctx, sku},
		expectationOrigins: LomsServiceMockGetStockInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetStockInfo.expectations = append(mmGetStockInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsService.GetStockInfo return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockGetStockInfoExpectation) Then(availableCountStock uint64, err error) *LomsServiceMock {
	e.results = &LomsServiceMockGetStockInfoResults{availableCountStock, err}
	return e.mock
}

// Times sets number of times LomsService.GetStockInfo should be invoked
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Times(n uint64) *mLomsServiceMockGetStockInfo {
	if n == 0 {
		mmGetStockInfo.mock.t.Fatalf("Times of LomsServiceMock.GetStockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockInfo.expectedInvocations, n)
	mmGetStockInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetStockInfo
}

func (mmGetStockInfo *mLomsServiceMockGetStockInfo) invocationsDone() bool {
	if len(mmGetStockInfo.expectations) == 0 && mmGetStockInfo.defaultExpectation == nil && mmGetStockInfo.mock.funcGetStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.mock.afterGetStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockInfo implements LomsService
func (mmGetStockInfo *LomsServiceMock) GetStockInfo(ctx context.Context, sku model.SKU) (availableCountStock uint64, err error) {
	mm_atomic.AddUint64(&mmGetStockInfo.beforeGetStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockInfo.afterGetStockInfoCounter, 1)

	mmGetStockInfo.t.Helper()

	if mmGetStockInfo.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.inspectFuncGetStockInfo(ctx, sku)
	}

	mm_params := LomsServiceMockGetStockInfoParams{ctx, sku}

	// Record call args
	mmGetStockInfo.GetStockInfoMock.mutex.Lock()
	mmGetStockInfo.GetStockInfoMock.callArgs = append(mmGetStockInfo.GetStockInfoMock.callArgs, &mm_params)
	mmGetStockInfo.GetStockInfoMock.mutex.Unlock()

	for _, e := range mmGetStockInfo.GetStockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.availableCountStock, e.results.err
		}
	}

	if mmGetStockInfo.GetStockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockInfo.GetStockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockInfo.GetStockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockInfo.GetStockInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockGetStockInfoParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockInfo.t.Errorf("LomsServiceMock.GetStockInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetStockInfo.t.Errorf("LomsServiceMock.GetStockInfo got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockInfo.t.Errorf("LomsServiceMock.GetStockInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetStockInfo.GetStockInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockInfo.GetStockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockInfo.t.Fatal("No results are set for the LomsServiceMock.GetStockInfo")
		}
		return (*mm_results).availableCountStock, (*mm_results).err
	}
	if mmGetStockInfo.funcGetStockInfo != nil {
		return mmGetStockInfo.funcGetStockInfo(ctx, sku)
	}
	mmGetStockInfo.t.Fatalf("Unexpected call to LomsServiceMock.GetStockInfo. %v %v", ctx, sku)
	return
}

// GetStockInfoAfterCounter returns a count of finished LomsServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LomsServiceMock) GetStockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.afterGetStockInfoCounter)
}

// GetStockInfoBeforeCounter returns a count of LomsServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LomsServiceMock) GetStockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.beforeGetStockInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.GetStockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Calls() []*LomsServiceMockGetStockInfoParams {
	mmGetStockInfo.mutex.RLock()

	argCopy := make([]*LomsServiceMockGetStockInfoParams, len(mmGetStockInfo.callArgs))
	copy(argCopy, mmGetStockInfo.callArgs)

	mmGetStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockInfoDone returns true if the count of the GetStockInfo invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockGetStockInfoDone() bool {
	if m.GetStockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockInfoMock.invocationsDone()
}

// MinimockGetStockInfoInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockGetStockInfoInspect() {
	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetStockInfoCounter := mm_atomic.LoadUint64(&m.afterGetStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockInfoMock.defaultExpectation != nil && afterGetStockInfoCounter < 1 {
		if m.GetStockInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo at\n%s", m.GetStockInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo at\n%s with params: %#v", m.GetStockInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetStockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockInfo != nil && afterGetStockInfoCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo at\n%s", m.funcGetStockInfoOrigin)
	}

	if !m.GetStockInfoMock.invocationsDone() && afterGetStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.GetStockInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockInfoMock.expectedInvocations), m.GetStockInfoMock.expectedInvocationsOrigin, afterGetStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockGetStockInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockGetStockInfoDone()
}
