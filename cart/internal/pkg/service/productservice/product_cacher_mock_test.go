// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package productservice

//go:generate minimock -i route256/cart/internal/pkg/service/productservice.ProductCacher -o product_cacher_mock_test.go -n ProductCacherMock -p productservice

import (
	"context"
	"route256/cart/internal/pkg/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductCacherMock implements ProductCacher
type ProductCacherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func(ctx context.Context, key model.SKU) (pp1 *model.Product, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, key model.SKU)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mProductCacherMockGet

	funcPut          func(ctx context.Context, key model.SKU, value *model.Product)
	funcPutOrigin    string
	inspectFuncPut   func(ctx context.Context, key model.SKU, value *model.Product)
	afterPutCounter  uint64
	beforePutCounter uint64
	PutMock          mProductCacherMockPut
}

// NewProductCacherMock returns a mock for ProductCacher
func NewProductCacherMock(t minimock.Tester) *ProductCacherMock {
	m := &ProductCacherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mProductCacherMockGet{mock: m}
	m.GetMock.callArgs = []*ProductCacherMockGetParams{}

	m.PutMock = mProductCacherMockPut{mock: m}
	m.PutMock.callArgs = []*ProductCacherMockPutParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductCacherMockGet struct {
	optional           bool
	mock               *ProductCacherMock
	defaultExpectation *ProductCacherMockGetExpectation
	expectations       []*ProductCacherMockGetExpectation

	callArgs []*ProductCacherMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductCacherMockGetExpectation specifies expectation struct of the ProductCacher.Get
type ProductCacherMockGetExpectation struct {
	mock               *ProductCacherMock
	params             *ProductCacherMockGetParams
	paramPtrs          *ProductCacherMockGetParamPtrs
	expectationOrigins ProductCacherMockGetExpectationOrigins
	results            *ProductCacherMockGetResults
	returnOrigin       string
	Counter            uint64
}

// ProductCacherMockGetParams contains parameters of the ProductCacher.Get
type ProductCacherMockGetParams struct {
	ctx context.Context
	key model.SKU
}

// ProductCacherMockGetParamPtrs contains pointers to parameters of the ProductCacher.Get
type ProductCacherMockGetParamPtrs struct {
	ctx *context.Context
	key *model.SKU
}

// ProductCacherMockGetResults contains results of the ProductCacher.Get
type ProductCacherMockGetResults struct {
	pp1 *model.Product
	err error
}

// ProductCacherMockGetOrigins contains origins of expectations of the ProductCacher.Get
type ProductCacherMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originKey string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mProductCacherMockGet) Optional() *mProductCacherMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for ProductCacher.Get
func (mmGet *mProductCacherMockGet) Expect(ctx context.Context, key model.SKU) *mProductCacherMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductCacherMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &ProductCacherMockGetParams{ctx, key}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for ProductCacher.Get
func (mmGet *mProductCacherMockGet) ExpectCtxParam1(ctx context.Context) *mProductCacherMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductCacherMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ProductCacherMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectKeyParam2 sets up expected param key for ProductCacher.Get
func (mmGet *mProductCacherMockGet) ExpectKeyParam2(key model.SKU) *mProductCacherMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductCacherMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ProductCacherMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.key = &key
	mmGet.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ProductCacher.Get
func (mmGet *mProductCacherMockGet) Inspect(f func(ctx context.Context, key model.SKU)) *mProductCacherMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ProductCacherMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ProductCacher.Get
func (mmGet *mProductCacherMockGet) Return(pp1 *model.Product, err error) *ProductCacherMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductCacherMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ProductCacherMockGetResults{pp1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the ProductCacher.Get method
func (mmGet *mProductCacherMockGet) Set(f func(ctx context.Context, key model.SKU) (pp1 *model.Product, err error)) *ProductCacherMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ProductCacher.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ProductCacher.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the ProductCacher.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mProductCacherMockGet) When(ctx context.Context, key model.SKU) *ProductCacherMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductCacherMock.Get mock is already set by Set")
	}

	expectation := &ProductCacherMockGetExpectation{
		mock:               mmGet.mock,
		params:             &ProductCacherMockGetParams{ctx, key},
		expectationOrigins: ProductCacherMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ProductCacher.Get return parameters for the expectation previously defined by the When method
func (e *ProductCacherMockGetExpectation) Then(pp1 *model.Product, err error) *ProductCacherMock {
	e.results = &ProductCacherMockGetResults{pp1, err}
	return e.mock
}

// Times sets number of times ProductCacher.Get should be invoked
func (mmGet *mProductCacherMockGet) Times(n uint64) *mProductCacherMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of ProductCacherMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mProductCacherMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements ProductCacher
func (mmGet *ProductCacherMock) Get(ctx context.Context, key model.SKU) (pp1 *model.Product, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, key)
	}

	mm_params := ProductCacherMockGetParams{ctx, key}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := ProductCacherMockGetParams{ctx, key}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("ProductCacherMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmGet.t.Errorf("ProductCacherMock.Get got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ProductCacherMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ProductCacherMock.Get")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, key)
	}
	mmGet.t.Fatalf("Unexpected call to ProductCacherMock.Get. %v %v", ctx, key)
	return
}

// GetAfterCounter returns a count of finished ProductCacherMock.Get invocations
func (mmGet *ProductCacherMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ProductCacherMock.Get invocations
func (mmGet *ProductCacherMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ProductCacherMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mProductCacherMockGet) Calls() []*ProductCacherMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ProductCacherMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ProductCacherMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *ProductCacherMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductCacherMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductCacherMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductCacherMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to ProductCacherMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductCacherMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mProductCacherMockPut struct {
	optional           bool
	mock               *ProductCacherMock
	defaultExpectation *ProductCacherMockPutExpectation
	expectations       []*ProductCacherMockPutExpectation

	callArgs []*ProductCacherMockPutParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductCacherMockPutExpectation specifies expectation struct of the ProductCacher.Put
type ProductCacherMockPutExpectation struct {
	mock               *ProductCacherMock
	params             *ProductCacherMockPutParams
	paramPtrs          *ProductCacherMockPutParamPtrs
	expectationOrigins ProductCacherMockPutExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// ProductCacherMockPutParams contains parameters of the ProductCacher.Put
type ProductCacherMockPutParams struct {
	ctx   context.Context
	key   model.SKU
	value *model.Product
}

// ProductCacherMockPutParamPtrs contains pointers to parameters of the ProductCacher.Put
type ProductCacherMockPutParamPtrs struct {
	ctx   *context.Context
	key   *model.SKU
	value **model.Product
}

// ProductCacherMockPutOrigins contains origins of expectations of the ProductCacher.Put
type ProductCacherMockPutExpectationOrigins struct {
	origin      string
	originCtx   string
	originKey   string
	originValue string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmPut *mProductCacherMockPut) Optional() *mProductCacherMockPut {
	mmPut.optional = true
	return mmPut
}

// Expect sets up expected params for ProductCacher.Put
func (mmPut *mProductCacherMockPut) Expect(ctx context.Context, key model.SKU, value *model.Product) *mProductCacherMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &ProductCacherMockPutExpectation{}
	}

	if mmPut.defaultExpectation.paramPtrs != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by ExpectParams functions")
	}

	mmPut.defaultExpectation.params = &ProductCacherMockPutParams{ctx, key, value}
	mmPut.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmPut.expectations {
		if minimock.Equal(e.params, mmPut.defaultExpectation.params) {
			mmPut.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPut.defaultExpectation.params)
		}
	}

	return mmPut
}

// ExpectCtxParam1 sets up expected param ctx for ProductCacher.Put
func (mmPut *mProductCacherMockPut) ExpectCtxParam1(ctx context.Context) *mProductCacherMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &ProductCacherMockPutExpectation{}
	}

	if mmPut.defaultExpectation.params != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Expect")
	}

	if mmPut.defaultExpectation.paramPtrs == nil {
		mmPut.defaultExpectation.paramPtrs = &ProductCacherMockPutParamPtrs{}
	}
	mmPut.defaultExpectation.paramPtrs.ctx = &ctx
	mmPut.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmPut
}

// ExpectKeyParam2 sets up expected param key for ProductCacher.Put
func (mmPut *mProductCacherMockPut) ExpectKeyParam2(key model.SKU) *mProductCacherMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &ProductCacherMockPutExpectation{}
	}

	if mmPut.defaultExpectation.params != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Expect")
	}

	if mmPut.defaultExpectation.paramPtrs == nil {
		mmPut.defaultExpectation.paramPtrs = &ProductCacherMockPutParamPtrs{}
	}
	mmPut.defaultExpectation.paramPtrs.key = &key
	mmPut.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmPut
}

// ExpectValueParam3 sets up expected param value for ProductCacher.Put
func (mmPut *mProductCacherMockPut) ExpectValueParam3(value *model.Product) *mProductCacherMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &ProductCacherMockPutExpectation{}
	}

	if mmPut.defaultExpectation.params != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Expect")
	}

	if mmPut.defaultExpectation.paramPtrs == nil {
		mmPut.defaultExpectation.paramPtrs = &ProductCacherMockPutParamPtrs{}
	}
	mmPut.defaultExpectation.paramPtrs.value = &value
	mmPut.defaultExpectation.expectationOrigins.originValue = minimock.CallerInfo(1)

	return mmPut
}

// Inspect accepts an inspector function that has same arguments as the ProductCacher.Put
func (mmPut *mProductCacherMockPut) Inspect(f func(ctx context.Context, key model.SKU, value *model.Product)) *mProductCacherMockPut {
	if mmPut.mock.inspectFuncPut != nil {
		mmPut.mock.t.Fatalf("Inspect function is already set for ProductCacherMock.Put")
	}

	mmPut.mock.inspectFuncPut = f

	return mmPut
}

// Return sets up results that will be returned by ProductCacher.Put
func (mmPut *mProductCacherMockPut) Return() *ProductCacherMock {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("ProductCacherMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &ProductCacherMockPutExpectation{mock: mmPut.mock}
	}

	mmPut.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmPut.mock
}

// Set uses given function f to mock the ProductCacher.Put method
func (mmPut *mProductCacherMockPut) Set(f func(ctx context.Context, key model.SKU, value *model.Product)) *ProductCacherMock {
	if mmPut.defaultExpectation != nil {
		mmPut.mock.t.Fatalf("Default expectation is already set for the ProductCacher.Put method")
	}

	if len(mmPut.expectations) > 0 {
		mmPut.mock.t.Fatalf("Some expectations are already set for the ProductCacher.Put method")
	}

	mmPut.mock.funcPut = f
	mmPut.mock.funcPutOrigin = minimock.CallerInfo(1)
	return mmPut.mock
}

// Times sets number of times ProductCacher.Put should be invoked
func (mmPut *mProductCacherMockPut) Times(n uint64) *mProductCacherMockPut {
	if n == 0 {
		mmPut.mock.t.Fatalf("Times of ProductCacherMock.Put mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmPut.expectedInvocations, n)
	mmPut.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmPut
}

func (mmPut *mProductCacherMockPut) invocationsDone() bool {
	if len(mmPut.expectations) == 0 && mmPut.defaultExpectation == nil && mmPut.mock.funcPut == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmPut.mock.afterPutCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmPut.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Put implements ProductCacher
func (mmPut *ProductCacherMock) Put(ctx context.Context, key model.SKU, value *model.Product) {
	mm_atomic.AddUint64(&mmPut.beforePutCounter, 1)
	defer mm_atomic.AddUint64(&mmPut.afterPutCounter, 1)

	mmPut.t.Helper()

	if mmPut.inspectFuncPut != nil {
		mmPut.inspectFuncPut(ctx, key, value)
	}

	mm_params := ProductCacherMockPutParams{ctx, key, value}

	// Record call args
	mmPut.PutMock.mutex.Lock()
	mmPut.PutMock.callArgs = append(mmPut.PutMock.callArgs, &mm_params)
	mmPut.PutMock.mutex.Unlock()

	for _, e := range mmPut.PutMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmPut.PutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPut.PutMock.defaultExpectation.Counter, 1)
		mm_want := mmPut.PutMock.defaultExpectation.params
		mm_want_ptrs := mmPut.PutMock.defaultExpectation.paramPtrs

		mm_got := ProductCacherMockPutParams{ctx, key, value}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmPut.t.Errorf("ProductCacherMock.Put got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmPut.PutMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmPut.t.Errorf("ProductCacherMock.Put got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmPut.PutMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

			if mm_want_ptrs.value != nil && !minimock.Equal(*mm_want_ptrs.value, mm_got.value) {
				mmPut.t.Errorf("ProductCacherMock.Put got unexpected parameter value, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmPut.PutMock.defaultExpectation.expectationOrigins.originValue, *mm_want_ptrs.value, mm_got.value, minimock.Diff(*mm_want_ptrs.value, mm_got.value))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPut.t.Errorf("ProductCacherMock.Put got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmPut.PutMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmPut.funcPut != nil {
		mmPut.funcPut(ctx, key, value)
		return
	}
	mmPut.t.Fatalf("Unexpected call to ProductCacherMock.Put. %v %v %v", ctx, key, value)

}

// PutAfterCounter returns a count of finished ProductCacherMock.Put invocations
func (mmPut *ProductCacherMock) PutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.afterPutCounter)
}

// PutBeforeCounter returns a count of ProductCacherMock.Put invocations
func (mmPut *ProductCacherMock) PutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.beforePutCounter)
}

// Calls returns a list of arguments used in each call to ProductCacherMock.Put.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPut *mProductCacherMockPut) Calls() []*ProductCacherMockPutParams {
	mmPut.mutex.RLock()

	argCopy := make([]*ProductCacherMockPutParams, len(mmPut.callArgs))
	copy(argCopy, mmPut.callArgs)

	mmPut.mutex.RUnlock()

	return argCopy
}

// MinimockPutDone returns true if the count of the Put invocations corresponds
// the number of defined expectations
func (m *ProductCacherMock) MinimockPutDone() bool {
	if m.PutMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.PutMock.invocationsDone()
}

// MinimockPutInspect logs each unmet expectation
func (m *ProductCacherMock) MinimockPutInspect() {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductCacherMock.Put at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterPutCounter := mm_atomic.LoadUint64(&m.afterPutCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && afterPutCounter < 1 {
		if m.PutMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductCacherMock.Put at\n%s", m.PutMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductCacherMock.Put at\n%s with params: %#v", m.PutMock.defaultExpectation.expectationOrigins.origin, *m.PutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && afterPutCounter < 1 {
		m.t.Errorf("Expected call to ProductCacherMock.Put at\n%s", m.funcPutOrigin)
	}

	if !m.PutMock.invocationsDone() && afterPutCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductCacherMock.Put at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.PutMock.expectedInvocations), m.PutMock.expectedInvocationsOrigin, afterPutCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductCacherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()

			m.MinimockPutInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductCacherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductCacherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockPutDone()
}
