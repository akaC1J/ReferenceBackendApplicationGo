// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package productservice

//go:generate minimock -i route256/cart/internal/pkg/service/productservice.productServiceInterface -o product_service_interface_mock_test.go -n ProductServiceInterfaceMock -p productservice

import (
	"context"
	"route256/cart/internal/pkg/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductServiceInterfaceMock implements productServiceInterface
type ProductServiceInterfaceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProductInfo          func(ctx context.Context, sku model.SKU) (pp1 *model.Product, err error)
	funcGetProductInfoOrigin    string
	inspectFuncGetProductInfo   func(ctx context.Context, sku model.SKU)
	afterGetProductInfoCounter  uint64
	beforeGetProductInfoCounter uint64
	GetProductInfoMock          mProductServiceInterfaceMockGetProductInfo
}

// NewProductServiceInterfaceMock returns a mock for productServiceInterface
func NewProductServiceInterfaceMock(t minimock.Tester) *ProductServiceInterfaceMock {
	m := &ProductServiceInterfaceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductInfoMock = mProductServiceInterfaceMockGetProductInfo{mock: m}
	m.GetProductInfoMock.callArgs = []*ProductServiceInterfaceMockGetProductInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductServiceInterfaceMockGetProductInfo struct {
	optional           bool
	mock               *ProductServiceInterfaceMock
	defaultExpectation *ProductServiceInterfaceMockGetProductInfoExpectation
	expectations       []*ProductServiceInterfaceMockGetProductInfoExpectation

	callArgs []*ProductServiceInterfaceMockGetProductInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductServiceInterfaceMockGetProductInfoExpectation specifies expectation struct of the productServiceInterface.GetProductInfo
type ProductServiceInterfaceMockGetProductInfoExpectation struct {
	mock               *ProductServiceInterfaceMock
	params             *ProductServiceInterfaceMockGetProductInfoParams
	paramPtrs          *ProductServiceInterfaceMockGetProductInfoParamPtrs
	expectationOrigins ProductServiceInterfaceMockGetProductInfoExpectationOrigins
	results            *ProductServiceInterfaceMockGetProductInfoResults
	returnOrigin       string
	Counter            uint64
}

// ProductServiceInterfaceMockGetProductInfoParams contains parameters of the productServiceInterface.GetProductInfo
type ProductServiceInterfaceMockGetProductInfoParams struct {
	ctx context.Context
	sku model.SKU
}

// ProductServiceInterfaceMockGetProductInfoParamPtrs contains pointers to parameters of the productServiceInterface.GetProductInfo
type ProductServiceInterfaceMockGetProductInfoParamPtrs struct {
	ctx *context.Context
	sku *model.SKU
}

// ProductServiceInterfaceMockGetProductInfoResults contains results of the productServiceInterface.GetProductInfo
type ProductServiceInterfaceMockGetProductInfoResults struct {
	pp1 *model.Product
	err error
}

// ProductServiceInterfaceMockGetProductInfoOrigins contains origins of expectations of the productServiceInterface.GetProductInfo
type ProductServiceInterfaceMockGetProductInfoExpectationOrigins struct {
	origin    string
	originCtx string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Optional() *mProductServiceInterfaceMockGetProductInfo {
	mmGetProductInfo.optional = true
	return mmGetProductInfo
}

// Expect sets up expected params for productServiceInterface.GetProductInfo
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Expect(ctx context.Context, sku model.SKU) *mProductServiceInterfaceMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductServiceInterfaceMockGetProductInfoExpectation{}
	}

	if mmGetProductInfo.defaultExpectation.paramPtrs != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by ExpectParams functions")
	}

	mmGetProductInfo.defaultExpectation.params = &ProductServiceInterfaceMockGetProductInfoParams{ctx, sku}
	mmGetProductInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProductInfo.expectations {
		if minimock.Equal(e.params, mmGetProductInfo.defaultExpectation.params) {
			mmGetProductInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductInfo.defaultExpectation.params)
		}
	}

	return mmGetProductInfo
}

// ExpectCtxParam1 sets up expected param ctx for productServiceInterface.GetProductInfo
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) ExpectCtxParam1(ctx context.Context) *mProductServiceInterfaceMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductServiceInterfaceMockGetProductInfoExpectation{}
	}

	if mmGetProductInfo.defaultExpectation.params != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Expect")
	}

	if mmGetProductInfo.defaultExpectation.paramPtrs == nil {
		mmGetProductInfo.defaultExpectation.paramPtrs = &ProductServiceInterfaceMockGetProductInfoParamPtrs{}
	}
	mmGetProductInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetProductInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetProductInfo
}

// ExpectSkuParam2 sets up expected param sku for productServiceInterface.GetProductInfo
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) ExpectSkuParam2(sku model.SKU) *mProductServiceInterfaceMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductServiceInterfaceMockGetProductInfoExpectation{}
	}

	if mmGetProductInfo.defaultExpectation.params != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Expect")
	}

	if mmGetProductInfo.defaultExpectation.paramPtrs == nil {
		mmGetProductInfo.defaultExpectation.paramPtrs = &ProductServiceInterfaceMockGetProductInfoParamPtrs{}
	}
	mmGetProductInfo.defaultExpectation.paramPtrs.sku = &sku
	mmGetProductInfo.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmGetProductInfo
}

// Inspect accepts an inspector function that has same arguments as the productServiceInterface.GetProductInfo
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Inspect(f func(ctx context.Context, sku model.SKU)) *mProductServiceInterfaceMockGetProductInfo {
	if mmGetProductInfo.mock.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("Inspect function is already set for ProductServiceInterfaceMock.GetProductInfo")
	}

	mmGetProductInfo.mock.inspectFuncGetProductInfo = f

	return mmGetProductInfo
}

// Return sets up results that will be returned by productServiceInterface.GetProductInfo
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Return(pp1 *model.Product, err error) *ProductServiceInterfaceMock {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductServiceInterfaceMockGetProductInfoExpectation{mock: mmGetProductInfo.mock}
	}
	mmGetProductInfo.defaultExpectation.results = &ProductServiceInterfaceMockGetProductInfoResults{pp1, err}
	mmGetProductInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo.mock
}

// Set uses given function f to mock the productServiceInterface.GetProductInfo method
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Set(f func(ctx context.Context, sku model.SKU) (pp1 *model.Product, err error)) *ProductServiceInterfaceMock {
	if mmGetProductInfo.defaultExpectation != nil {
		mmGetProductInfo.mock.t.Fatalf("Default expectation is already set for the productServiceInterface.GetProductInfo method")
	}

	if len(mmGetProductInfo.expectations) > 0 {
		mmGetProductInfo.mock.t.Fatalf("Some expectations are already set for the productServiceInterface.GetProductInfo method")
	}

	mmGetProductInfo.mock.funcGetProductInfo = f
	mmGetProductInfo.mock.funcGetProductInfoOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo.mock
}

// When sets expectation for the productServiceInterface.GetProductInfo which will trigger the result defined by the following
// Then helper
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) When(ctx context.Context, sku model.SKU) *ProductServiceInterfaceMockGetProductInfoExpectation {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductServiceInterfaceMock.GetProductInfo mock is already set by Set")
	}

	expectation := &ProductServiceInterfaceMockGetProductInfoExpectation{
		mock:               mmGetProductInfo.mock,
		params:             &ProductServiceInterfaceMockGetProductInfoParams{ctx, sku},
		expectationOrigins: ProductServiceInterfaceMockGetProductInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProductInfo.expectations = append(mmGetProductInfo.expectations, expectation)
	return expectation
}

// Then sets up productServiceInterface.GetProductInfo return parameters for the expectation previously defined by the When method
func (e *ProductServiceInterfaceMockGetProductInfoExpectation) Then(pp1 *model.Product, err error) *ProductServiceInterfaceMock {
	e.results = &ProductServiceInterfaceMockGetProductInfoResults{pp1, err}
	return e.mock
}

// Times sets number of times productServiceInterface.GetProductInfo should be invoked
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Times(n uint64) *mProductServiceInterfaceMockGetProductInfo {
	if n == 0 {
		mmGetProductInfo.mock.t.Fatalf("Times of ProductServiceInterfaceMock.GetProductInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProductInfo.expectedInvocations, n)
	mmGetProductInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo
}

func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) invocationsDone() bool {
	if len(mmGetProductInfo.expectations) == 0 && mmGetProductInfo.defaultExpectation == nil && mmGetProductInfo.mock.funcGetProductInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProductInfo.mock.afterGetProductInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProductInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProductInfo implements productServiceInterface
func (mmGetProductInfo *ProductServiceInterfaceMock) GetProductInfo(ctx context.Context, sku model.SKU) (pp1 *model.Product, err error) {
	mm_atomic.AddUint64(&mmGetProductInfo.beforeGetProductInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductInfo.afterGetProductInfoCounter, 1)

	mmGetProductInfo.t.Helper()

	if mmGetProductInfo.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.inspectFuncGetProductInfo(ctx, sku)
	}

	mm_params := ProductServiceInterfaceMockGetProductInfoParams{ctx, sku}

	// Record call args
	mmGetProductInfo.GetProductInfoMock.mutex.Lock()
	mmGetProductInfo.GetProductInfoMock.callArgs = append(mmGetProductInfo.GetProductInfoMock.callArgs, &mm_params)
	mmGetProductInfo.GetProductInfoMock.mutex.Unlock()

	for _, e := range mmGetProductInfo.GetProductInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProductInfo.GetProductInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductInfo.GetProductInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductInfo.GetProductInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetProductInfo.GetProductInfoMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceInterfaceMockGetProductInfoParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProductInfo.t.Errorf("ProductServiceInterfaceMock.GetProductInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductInfo.GetProductInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetProductInfo.t.Errorf("ProductServiceInterfaceMock.GetProductInfo got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductInfo.GetProductInfoMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductInfo.t.Errorf("ProductServiceInterfaceMock.GetProductInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProductInfo.GetProductInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductInfo.GetProductInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductInfo.t.Fatal("No results are set for the ProductServiceInterfaceMock.GetProductInfo")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProductInfo.funcGetProductInfo != nil {
		return mmGetProductInfo.funcGetProductInfo(ctx, sku)
	}
	mmGetProductInfo.t.Fatalf("Unexpected call to ProductServiceInterfaceMock.GetProductInfo. %v %v", ctx, sku)
	return
}

// GetProductInfoAfterCounter returns a count of finished ProductServiceInterfaceMock.GetProductInfo invocations
func (mmGetProductInfo *ProductServiceInterfaceMock) GetProductInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.afterGetProductInfoCounter)
}

// GetProductInfoBeforeCounter returns a count of ProductServiceInterfaceMock.GetProductInfo invocations
func (mmGetProductInfo *ProductServiceInterfaceMock) GetProductInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.beforeGetProductInfoCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceInterfaceMock.GetProductInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductInfo *mProductServiceInterfaceMockGetProductInfo) Calls() []*ProductServiceInterfaceMockGetProductInfoParams {
	mmGetProductInfo.mutex.RLock()

	argCopy := make([]*ProductServiceInterfaceMockGetProductInfoParams, len(mmGetProductInfo.callArgs))
	copy(argCopy, mmGetProductInfo.callArgs)

	mmGetProductInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductInfoDone returns true if the count of the GetProductInfo invocations corresponds
// the number of defined expectations
func (m *ProductServiceInterfaceMock) MinimockGetProductInfoDone() bool {
	if m.GetProductInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductInfoMock.invocationsDone()
}

// MinimockGetProductInfoInspect logs each unmet expectation
func (m *ProductServiceInterfaceMock) MinimockGetProductInfoInspect() {
	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceInterfaceMock.GetProductInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductInfoCounter := mm_atomic.LoadUint64(&m.afterGetProductInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductInfoMock.defaultExpectation != nil && afterGetProductInfoCounter < 1 {
		if m.GetProductInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductServiceInterfaceMock.GetProductInfo at\n%s", m.GetProductInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductServiceInterfaceMock.GetProductInfo at\n%s with params: %#v", m.GetProductInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetProductInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInfo != nil && afterGetProductInfoCounter < 1 {
		m.t.Errorf("Expected call to ProductServiceInterfaceMock.GetProductInfo at\n%s", m.funcGetProductInfoOrigin)
	}

	if !m.GetProductInfoMock.invocationsDone() && afterGetProductInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceInterfaceMock.GetProductInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductInfoMock.expectedInvocations), m.GetProductInfoMock.expectedInvocationsOrigin, afterGetProductInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceInterfaceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductInfoDone()
}
